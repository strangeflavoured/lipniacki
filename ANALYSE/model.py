import numpy as np

def limit1(*args):
    lim=[0.009523809523809526,
    0.001249840474003489,
    0.18922635001247531,
    3.390897837005827e-05,
    0.0004677915798676459,
    0.005120053248726772,
    0.08364024197082653,
    0.1742505041026827,
    0.00010455030246190759,
    0.013565322970386295,
    0.0015303797313557881,
    0.00010455030246190759,
    0.037428104115155084,
    0.0012800133104335894]
    if args:
        a=[]
        for i in args:
            a.append(lim[i])
        a=np.stack(a)
        return a
    else:
        return np.stack(lim)

def limit0(*args):
    lim=[0.19999999999999998,
    0.0,
    0.0,
    0.0,
    0.0,
    0.00031550548258807014,
    0.002295766775798542,
    0.004782847451384398,
    2.869708470839423e-06,
    0.0025066291759479357,
    0.003435730955447908,
    2.869708470839423e-06,
    0.05920955816603063,
    7.891498111268744e-05]
    if args:
        a=[]
        for i in args:
            a.append(lim[i])
        a=np.stack(a)
        return a
    else:
        return np.stack(lim)

def limit0KO(*args):
    lim=[0.19999999999999998,
    0.0,
    0.0,
    0.0,
    0.0,
    0.000315505479238446,
    0.0022957667766667,
    0.0,
    0.0,
    0.002506629175861468,
    0.0034357309554894186,
    2.8697084708306457e-06,
    0.05920956591079752,
    7.887627315500105e-05]
    if args:
        a=[]
        for i in args:
            a.append(lim[i])
        a=np.stack(a)
        return a
    else:
        return np.stack(lim)

def limitKO(*args):
    lim=[0.009523809523809523,
    0.014652010990516197,
    0.1758241758712596,
    0.0005457750322332469,
    0.0008599442953586085,
    0.007290003835358174,
    0.2280822431776236,
    0.0,
    0.0,
    0.01862454312261561,
    0.0007990443287702715,
    0.0002851028161794762,
    0.005869099408537719,
    0.0018225191261078103]
    if args:
        a=[]
        for i in args:
            a.append(lim[i])
        a=np.stack(a)
        return a
    else:
        return np.stack(lim)

def meanpy(*args):
    mn=[0.014072925476425044,
    0.005034594435496627,
    0.18068921043762995,
    5.569496439148367e-05,
    0.00048555177347776385,
    0.005692455507044586,
    0.09685803946315466,
    0.15245472383590417,
    0.00010987602925388629,
    0.015192373854791223,
    0.002831629232167119,
    0.00010987602925388629,
    0.0341747527371434,
    0.001378160448516852]
    if args:
        a=[]
        for i in args:
            a.append(mn[i])
        a=np.stack(a)
        return a
    else:
        return np.stack(mn)

def meanKO(*args):
    mn=[0.015002015291045393,
    0.020537492327414527,
    0.16395790578122652,
    0.0005084571506466522,
    0.0007527441377600515,
    0.007427596110784487,
    0.2312892937030016,
    0.0,
    0.0,
    0.0161152676776444,
    0.0007251199935555095,
    0.00024810084629787305,
    0.005246285896797676,
    0.0015775755702848655]
    if args:
            a=[]
            for i in args:
                a.append(mn[i])
            a=np.stack(a)
            return a
    else:
        return np.stack(mn)

def mean24(*args):
    mn=[0.010789583777066793,
    0.0023029010928785443,
    0.18684839315435764,
    3.997413199367154e-05,
    0.0004727740136379802,
    0.005279228907067431,
    0.08729672300955137,
    0.1681909915145243,
    0.00010603615193516456,
    0.014019694739051985,
    0.0018930209617240641,
    0.00010603615193516456,
    0.03652715863953239,
    0.001307469189261111]
    if args:
        a=[]
        for i in args:
            a.append(mn[i])
        a=np.stack(a)
        return a
    else:
        return np.stack(mn)

def mean24KO(*args):
    mn=[0.011024249766569676,
    0.016264004531803156,
    0.17256368664810606,
    0.0005355530461919283,
    0.000830580107941398,
    0.007327691024129917,
    0.22896065049771938,
    0.0,
    0.0,
    0.017937270143624378,
    0.0007788069895090412,
    0.00027496821420143936,
    0.005698516068356846,
    0.0017554135001379215]
    if args:
            a=[]
            for i in args:
                a.append(mn[i])
            a=np.stack(a)
            return a
    else:
        return np.stack(mn)

def pymax(*args):#max der simulation
    mx=[0.1999999999999998,
    0.08089627112811425,
    0.18922639487399606,
    0.0002324936229081099,
    0.006369140961230574,
    0.04758048244304242,
    0.2797994808147606,
    0.18421052142060007,
    0.0001917566106792885,
    0.0358453042514447,
    0.0191610929627825,
    0.0001917566106792885,
    0.05325671952227655,
    0.0033880406271132547]
    if args:
            a=[]
            for i in args:
                a.append(mx[i])
            a=np.stack(a)
            return a
    else:
        return np.stack(mx)

def pymaxKO(*args):#max der KO simulation
    mx=[0.1999999999999997,
    0.09174245751329718,
    0.17582413758763124,
    0.0005708746932024814,
    0.006411882010813844,
    0.04768988701269588,
    0.2855146886569982,
    0.0,
    0.0,
    0.01862455745120112,
    0.0034357309556492834,
    0.0002851028182266188,
    0.005869178783620111,
    0.0018233767830714768]
    if args:
            a=[]
            for i in args:
                a.append(mx[i])
            a=np.stack(a)
            return a
    else:
        return np.stack(mx)

def median(*args):
    md=[0.009523809523809526,
    0.0012498410830373017,
    0.18922368538735926,
    3.390905124063913e-05,
    0.0004677915925478408,
    0.005120052818053156,
    0.08364024225144856,
    0.17425050379166204,
    0.00010455030258472008,
    0.01356532306104528,
    0.001530379743745633,
    0.00010455030258472008,
    0.037428103630962634,
    0.0012800133062893255]
    if args:
            a=[]
            for i in args:
                a.append(md[i])
            a=np.stack(a)
            return a
    else:
        return np.stack(md)

def medianKO(*args):
    md=[0.009523809523809526,
    0.014652014572830567,
    0.17581485082355638,
    0.0005457735301902752,
    0.0008599377515377297,
    0.007290002615469068,
    0.22808227858518373,
    0.0,
    0.0,
    0.018624542366917157,
    0.0007990499581103953,
    0.0002851028156494503,
    0.005869097678575827,
    0.0018224884062606932]
    if args:
            a=[]
            for i in args:
                a.append(md[i])
            a=np.stack(a)
            return a
    else:
        return np.stack(md)